var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","omniauthcallbackscontroller","owner","repo","search","repos","searchcontroller","user","==()","==()","call()","call()","esoteric_languages()","from_omniauth()","github()","index()","new()","new()","new()","popular_languages()","application.js.coffee","application.css.scss","mixins.scss","variables.scss","new.html.haml","_first_page.html.haml","_gap.html.haml","_last_page.html.haml","_next_page.html.haml","_page.html.haml","_paginator.html.haml","_prev_page.html.haml","application.html.haml","index.html.haml"],"longSearchIndex":["applicationcontroller","applicationhelper","omniauthcallbackscontroller","owner","repo","search","search::repos","searchcontroller","user","owner#==()","repo#==()","search::repos#call()","search::repos::call()","repo::esoteric_languages()","user::from_omniauth()","omniauthcallbackscontroller#github()","searchcontroller#index()","owner::new()","repo::new()","search::repos::new()","repo::popular_languages()","","","","","","","","","","","","","",""],"info":[["ApplicationController","","classes/ApplicationController.html","",""],["ApplicationHelper","","classes/ApplicationHelper.html","",""],["OmniauthCallbacksController","","classes/OmniauthCallbacksController.html","","<p>Controller for handling OAuth callback requests.\n"],["Owner","","classes/Owner.html","","<p>Model for repo owners. Currently this doesn&#39;t serve much purpose.\nInitially the idea was to make …\n"],["Repo","","classes/Repo.html","","<p>Model for GitHub repos.\n<p>This model is not backed by the database since no search results are stored\nor …\n"],["Search","","classes/Search.html","",""],["Search::Repos","","classes/Search/Repos.html","","<p>The repo search service. Searches GitHub for repos using Octokit.rb. Can be\nused by calling a single …\n"],["SearchController","","classes/SearchController.html","","<p>Controller through which all GitHub searches are made.\n"],["User","","classes/User.html","","<p>Model for storing authenticated users. The first time a user logs in via\nGitHub OAuth some of their account …\n"],["==","Owner","classes/Owner.html#method-i-3D-3D","(other)","<p>Compare two owner objects by their attributes\n<p>Parameters\n<p><code>other</code> - The other owner object to compare against. …\n"],["==","Repo","classes/Repo.html#method-i-3D-3D","(other)","<p>Compare two repo objects by their attributes.\n<p>Parameters\n<p><code>other</code> - The other repo object to compare against. …\n"],["call","Search::Repos","classes/Search/Repos.html#method-i-call","(args = nil)","<p>Search GitHub for matching repos.\n<p>Parameters\n<p><code>args</code> - Arguments for the search. See the class\n<code>call</code> method …\n"],["call","Search::Repos","classes/Search/Repos.html#method-c-call","(args = {})","<p>Search GitHub for matching repos.\n<p>Parameters\n<p><code>args</code> - Arguments for the search. Only the <code>:q</code>\noption is required. …\n"],["esoteric_languages","Repo","classes/Repo.html#method-c-esoteric_languages","()","<p>List of not so popular languages, taken from github.com/search/advanced.\n"],["from_omniauth","User","classes/User.html#method-c-from_omniauth","(auth)","<p>Find or create a user by OAuth provider and OAuth UID. If the user does not\nalready exist then their …\n"],["github","OmniauthCallbacksController","classes/OmniauthCallbacksController.html#method-i-github","()","<p>Following the Devise/Omniauth convention an action is provided for each\nOAuth provider. Since this app …\n"],["index","SearchController","classes/SearchController.html#method-i-index","()","<p>Calls the search service, passing along only the parameters relevant to the\nto searching and the current …\n"],["new","Owner","classes/Owner.html#method-c-new","(attrs = {})","<p>Create a new owner object.\n<p>Parameters\n<p><code>attrs</code> - Attributes from the owner attribute of a repo returned\nby …\n"],["new","Repo","classes/Repo.html#method-c-new","(attrs = {})","<p>Create a new repo opbject.\n<p>Parameters\n<p><code>attrs</code> - Attributes from a repo returned by the GitHub API.\nOnly known …\n"],["new","Search::Repos","classes/Search/Repos.html#method-c-new","(args = {})","<p>Create a new repo search service object.\n<p>Parameters\n<p><code>args</code> - Arguments for any subsequent calls to to\n<code>call</code> …\n"],["popular_languages","Repo","classes/Repo.html#method-c-popular_languages","()","<p>List of popular languages, taken from github.com/search/advanced.\n"],["application.js.coffee","","files/app/assets/javascripts/application_js_coffee.html","","<p># This is a manifest file that&#39;ll be compiled into application.js,\nwhich will include all the files …\n"],["application.css.scss","","files/app/assets/stylesheets/application_css_scss.html","","\n<pre><code> This is a manifest file that&#39;ll be compiled into application.css, which will include all the files\n ...</code></pre>\n"],["mixins.scss","","files/app/assets/stylesheets/mixins_scss.html","","<p>@import “variables”;\n"],["variables.scss","","files/app/assets/stylesheets/variables_scss.html","",""],["new.html.haml","","files/app/views/devise/sessions/new_html_haml.html","","<p>#sign-in\n\n<pre><code>%h1 Sign In\n%p Please sign in with your GitHub account to begin searching.\n= link_to &quot;#{image_tag(&#39;GitHub-Mark-Light-32px.png&#39;)} ...</code></pre>\n"],["_first_page.html.haml","","files/app/views/kaminari/_first_page_html_haml.html","","<p>%li\n\n<pre><code>= link_to_unless current_page.first?, raw(t(&#39;views.pagination.first&#39;)), url, { remote: remote }</code></pre>\n"],["_gap.html.haml","","files/app/views/kaminari/_gap_html_haml.html","","<p>%span.page.gap= raw(t(&#39;views.pagination.truncate&#39;))\n"],["_last_page.html.haml","","files/app/views/kaminari/_last_page_html_haml.html","","<p>%li\n\n<pre><code>= link_to_unless current_page.last?, raw(t(&#39;views.pagination.last&#39;)), url, { remote: remote }</code></pre>\n"],["_next_page.html.haml","","files/app/views/kaminari/_next_page_html_haml.html","","<p>%li\n\n<pre><code>= link_to_unless current_page.last?, raw(t(&#39;views.pagination.next&#39;)), url, rel: &#39;next&#39;, remote: remote</code></pre>\n"],["_page.html.haml","","files/app/views/kaminari/_page_html_haml.html","","<p>%li{ class: “#{&#39;active&#39; if page.current?}” }\n\n<pre><code>= link_to page, url</code></pre>\n"],["_paginator.html.haml","","files/app/views/kaminari/_paginator_html_haml.html","","<p>paginator.render do\n\n<pre><code>%ul.pagination\n  = first_page_tag unless current_page.first?\n  = prev_page_tag unless ...</code></pre>\n"],["_prev_page.html.haml","","files/app/views/kaminari/_prev_page_html_haml.html","","<p>%li\n\n<pre><code>= link_to_unless current_page.first?, raw(t(&#39;views.pagination.previous&#39;)), url, rel: &#39;prev&#39;</code></pre>\n"],["application.html.haml","","files/app/views/layouts/application_html_haml.html","","<p>!!! %html{ dir: &#39;ltr&#39;, lang: &#39;en-US&#39; }\n\n<pre><code>%head\n  %meta{ charset: &#39;utf-8&#39; }\n  %title Search ...</code></pre>\n"],["index.html.haml","","files/app/views/search/index_html_haml.html","","<p>.well\n\n<pre><code>= bootstrap_form_tag url: root_path, html: { class: &#39;form-inline&#39;, method: :get } do |f|\n  = f.text_field ...</code></pre>\n"]]}}